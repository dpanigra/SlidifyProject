pbeta(0.75, 2, 1)
?pbeta
?dbeta
quit()
library(manipulate)
library(manipulate)
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(ggplot2)
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
load(galton)
library(UsingR); data(galton); library(ggplot2)
library(reshape2)
longGalton <- melt(galton, measure.vars = c("child", "parent"))
g <- ggplot(longGalton, aes(x = value)) +
g <- ggplot(longGalton, aes(x = value)) + geom_histogram(aes(y = ..density..,  fill = variable), binwidth=1, colour = "black") + geom_density(size = 2)
g <- g + facet_grid(. ~ variable)
g
g <- ggplot(longGalton, aes(x = value)) + geom_histogram(aes(y = ..density..,  fill = variable), binwidth=1, colour = "black") + geom_density(size = 2)
g <- g + facet_grid(. ~ variable)
g
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
rm(ls())
rm(list<-ls())
ls()
rm(c<-ls())
rm(list=ls())
library(ggplot2)
xvals <- seq(-10, 10, by = .01)
dat <- data.frame(
y = c(
dnorm(xvals, mean = 0, sd = 1),
dnorm(xvals, mean = 0, sd = 2),
dnorm(xvals, mean = 0, sd = 3),
dnorm(xvals, mean = 0, sd = 4)
),
x = rep(xvals, 4),
factor = factor(rep(1 : 4, rep(length(xvals), 4)))
)
ggplot(dat, aes(x = x, y = y, color = factor)) + geom_line(size = 2)
y = c(
dnorm(xvals, mean = 0, sd = 1),
dnorm(xvals, mean = 0, sd = 2),
dnorm(xvals, mean = 0, sd = 3),
dnorm(xvals, mean = 0, sd = 4)
)
dnorm(xvals, mean = 0, sd = 1)
?dnorm
?qnorm
rm(list=ls())
nosim <- 1000
n <- 10
?runif
?rnorm
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
mean
?apply
1 / sqrt(n)
M <- matrix(seq(1,16), 4, 4)
M
apply(M, 1, min)
M
apply(M, 2, min)
apply(M, 5, min)
apply(M, 4, min)
apply(M, 3, min)
apply(M, 2, min)
?cumsum
n <- 10000
1:n
means <- cumsum(rnorm(n))/(1:n)
means
rnorm(n)
exit
quit
quit()
library(kernlab)
quit()
library(kernlab)
install.packages("kernlab")
library(kernlab)
head(kernlab)
data(kernlab)
library(kernlab)
data(kernlab)
quit()
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
trainIndex = createDataPartition(diagnosis, p = 0.5, list = FALSE)
training = adData[trainIndex, ]
testing = adData[-trainIndex, ]
adData = data.frame(diagnosis, predictors)
trainIndex = createDataPartition(diagnosis, p = 0.5, list = FALSE)
library(caret)
install.packages("caret")
trainIndex = createDataPartition(diagnosis, p = 0.5, list = FALSE)
library(caret)
trainIndex = createDataPartition(diagnosis, p = 0.5, list = FALSE)
training = adData[trainIndex, ]
testing = adData[-trainIndex, ]
rm(list=ls())
?createDataPartition
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis, p = 0.5, list = FALSE)
training = adData[trainIndex, ]
rm(list=ls())
adData = data.frame(diagnosis, predictors)
trainIndex = createDataPartition(diagnosis, p = 0.5)
adData = data.frame(diagnosis, predictors)
library(AppliedPredictiveModeling)
adData = data.frame(diagnosis, predictors)
library(Hmisc)
library(caret)
adData = data.frame(diagnosis, predictors)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
trainIndex = createDataPartition(diagnosis, p = 0.5)
training = adData[trainIndex, ]
rm(list=ls())
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(mixtures)
names(concrete)
names <- colnames(concrete)
names <- names[-length(names)]
names <- names[-length(names)]
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names <- colnames(concrete)
names <- names[-length(names)]
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
cutCS <- cut2(training$CompressiveStrength, g = 4)
summary(cutCS)
ggplot(data = training, aes(y = index, x = cutCS)) + geom_boxplot() + geom_jitter(col = "blue") +
theme_bw()
rm(list = ls())
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names <- colnames(concrete)
names <- names[-length(names)]
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
cutCS <- cut2(training$CompressiveStrength, g = 4)
summary(cutCS)
ggplot(data = training, aes(y = index, x = cutCS)) + geom_boxplot() + geom_jitter(col = "blue") +
theme_bw()
featurePlot(x = training[, names], y = cutCS, plot = "box")
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram() + theme_bw()
rm (list=ls())
data(AlzheimerDisease)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
trainIndex = createDataPartition(diagnosis, p = 3/4)
training = adData[trainIndex, ]
trainIndex = createDataPartition(diagnosis, p = 3/4)[[1]]
training = adData[trainIndex, ]
testing = adData[-trainIndex, ]
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
preProc$rotation
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.9)
preProc$rotation
rm(list=ls())
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
trainIndex = createDataPartition(diagnosis, p = 3/4)[[1]]
training = adData[trainIndex, ]
testing = adData[-trainIndex, ]
names <- colnames(concrete)
quit()
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
#
set.seed(125)
inTrain <- segmentationOriginal$Case == "Train"
training <- segmentationOriginal[inTrain, ]
model <- train(Class ~ ., data=training, method="rpart")
model$finalModel
plot(model$finalModel)
text(model$finalModel)
install.packages("rpart")
install.packages("rpart")
library(AppliedPredictiveModeling)
install.packages("caret")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
quit()
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
inTrain <- segmentationOriginal$Case == "Train"
training <- segmentationOriginal[inTrain, ]
model <- train(Class ~ ., data=training, method="rpart")
install.packages('e1071', dependencies=TRUE)
model <- train(Class ~ ., data=training, method="rpart")
model$finalModel
plot(model$finalModel)
text(model$finalModel)
library(rattle)
install.packages("rattle",dependencies = "true")
install.packages("rattle",dependencies = true)
install.packages("rattle",dependencies=TRUE)
library(rattle)
quit()
install.packages("devtools")
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
lm(count~spray-1, data=InsectSpray)
require(stats)
lm(count~spray-1, data=InsectSpray)
lm(count~spray-1, data=InsectSpray)
?InspectSpray
??InspectSpray
require(stats); require(graphics)
?InspectSpray
lm(count~spray-1, data=InsectSpray)
require(stats)
boxplot(count ~ spray, data = InsectSprays,
xlab = "Type of spray", ylab = "Insect count",
main = "InsectSprays data", varwidth = TRUE, col = "lightgray")
lm(count~spray-1, data=InsectSprays)
quit()
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
cards
cars
summary(cars)
head(cars)
names(cars)
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
ftype(mean)
library(pryr)
ftype(mean)
install.packages("pryr")
ftype(mean)
library(pryr)
ftype(mean)
ftype(colSums)
ftype(lm)
ftype(dgamma)
ftype(show)
ftype(predict)
install.packages("shiny")
libray(shiny)
library(shiny)
setwd("C:\Users\dpanigra\Box Sync\Courses\DataScientist\Developing Data Products\project")
setwd("C:/Users/dpanigra/Box Sync/Courses/DataScientist/Developing Data Products/project")
getwd()
library(datasets)
data("iris")
iris
View(iris)
plot(cluster(iris))
?iris
iris
class(iris)
fit <- kmeans(iris, 3)
fit <- kmeans(iris, 5)
fit <- kmeans(iris, 3)
library(cluster)
clusplot(mydata, fit$cluster, color=TRUE, shade=TRUE,
labels=3, lines=0)
clusplot(iris, fit$cluster, color=TRUE, shade=TRUE,
labels=3, lines=0)
fit <- kmeans([iris ~ Species], 3)
fit <- kmeans(Species - iris, 3)
mynames <- names(iris) - Species
mynames <- names(iris)
mynames
fit <- kmeans(iris[,1] ~ iris[,5], 3)
fit <- kmeans(iris[,1] ~ iris[,5])
iris_data <- iris
boxplot(iris_data[,1] ~ iris_data[,5], notch = TRUE, col = c(2,3,4))
plot(iris_data[,1] ~ iris_data[,3], main="Linear Regression", xlab="Petal legth", ylab="Sepal length", pch = 21, bg = as.numeric(iris_data$Species)+1)
abline(lm.i, lwd=2)
plot(iris_data[,1] ~ iris_data[,3], main="Linear Regression", xlab="Petal legth", ylab="Sepal length", pch = 21, bg = as.numeric(iris_data$Species)+1)
lm.i <- lm(iris_data[,1] ~ iris_data[,3])
abline(lm.i, lwd=2)
iris
predict(iris)
predict(Model, newdata=iris)
predict(c(5.1, 3.5, 1.4), newdata=iris)
predict(c(5, 3, 1), newdata=iris)
library(shiny)
shinyUI (
pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
)
)
runApp()
runApp()
runApp()
getwd()
setwd("c:/")
setwd("C:/Users/dpanigra/Box Sync/Courses/DataScientist/Developing Data Products/shinyproject")
runApp()
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
install.packages('devtools')
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
install.packages("Rtools")
library('shinyapps')
shinyapps::setAccountInfo(name='dpanigra', token='4F6E5CDBF7975642AA30C5ABFC59FE74', secret='RtWkPIb3gySvmc43GgOtqX/xGTPpthU+r/1lCxvv')
library(shinyapps)
devtools::install_github('rstudio/shinyapps')
install.packages("digest")
install.packages("devtools")
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='dpanigra', token='4F6E5CDBF7975642AA30C5ABFC59FE74', secret='RtWkPIb3gySvmc43GgOtqX/xGTPpthU+r/1lCxvv')
library(shinyapps)
getwd()
deployApp()
install_github()
library(devtools)
install_github("slidify", "ramnathv")
install.packages("stringi")
install.packages("stringi")
install_github("slidify", "ramnathv")
library(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
getwd()
setwd("C:/Users/dpanigra/Box Sync/Courses/DataScientist/Developing Data Products/slidify")
author("slidifyProject")
slidify("index.Rmd")
library("knitr")
browse("index.html")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
mtcars
unique(mtcars[,3])
unique(mtcars$cyl)
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
?mmtcars
?head
head(mtcars, n=3)
slidify("index.Rmd")
head(mtcars, n=3)
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
#find the best regression model for mtcards data
modelFit <- lm(mpg ~ hp + cyl + wt, data=mtcars)
modelFit$coefficients
slidify("index.Rmd")
modelFit$coefficients
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
modelFit <- lm(mpg ~ hp + cyl + wt, data=mtcars)
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
modelFit
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
par()$mar
slidify("index.Rmd")
par()$mar
browseURL("index.html")
par()$mar
slidify("index.Rmd")
browseURL("index.html")
quit()
